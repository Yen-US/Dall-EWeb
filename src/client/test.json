{
    "id": "b745ad7e-ff50-42e1-a095-3c744a7a11f8",
    "version": "2.2.1",
    "cacheVersion": "cb5f04d0-d39f-4127-aeb1-d985e5054755",
    "label": "Schedule execution",
    "icon": "clock",
    "iconType": "default",
    "iconUrl": "",
    "shape": "arrow-down",
    "description": "Use this step to start a flow at an exact time and date, either once or on a regular schedule.",
    "isGatewayStep": true,
    "publishedBy": "Mustard Labs",
    "categories": [
      "Logical",
      "Gateway"
    ],
    "recommended": [],
    "tags": [],
    "template": "const moment = require('moment-timezone');\nconst timerEventName = `timer/${this.config.flowId}/${this.currentStepId}`;\n\nconst getTimeString = (date, time) => {\n  const dateFormat = 'YYYY-MM-DD HH:mm:ss';\n  return date && !time ?\n    moment.utc(date, dateFormat) :\n    moment.utc(`${date} ${time}`, dateFormat);\n};\nthis.log.info(\"scheduleEvents\", scheduleEvents)\n\nconst cronEvents = scheduleEvents.map(item => ({\n  id: item.scheduleEventData.id,\n  eventName: item.scheduleEventData.eventName,\n  isRunAtActivation: item.scheduleEventData.isRunAtActivation,\n  crons: item.scheduleEventData.expressions.map(cronItem => {\n    const cron = {\n      cron: cronItem,\n      timezone: item.scheduleEventData.timeZone.value,\n      startTime: getTimeString(item.scheduleEventData.startExpression.date, item.scheduleEventData.startExpression.time)\n    }\n    if (!item.scheduleEventData.isEndTime && item.scheduleEventData.endExpression.date) {\n      cron.endTime = getTimeString(item.scheduleEventData.endExpression.date, item.scheduleEventData.endExpression.time);\n    }\n    return cron;\n  })\n}));\n\nif (this.state.name) {\n  await this.session.start();\n  this.event.processed = true;\n  return this.exitStep(this.state.name);\n}\n\nlet triggers = null;\nif (multipleLegs) {\n  triggers = _.reduce(cronEvents, (memo, event) => {\n    return memo.on({\n      name: `${timerEventName}/${event.id}`,\n      schedule: event.crons,\n      eventName: event.eventName\n    }, () => {})\n  }, this.triggers);\n} else {\n  triggers = this.triggers.on({\n    name: `${timerEventName}/next`,\n    schedule: _.flatten(cronEvents.map(item => item.crons)),\n    events: _.flatten(cronEvents.map(item => ({name: item.eventName, crons: item.crons})))\n  }, () => {});\n}\n\nreturn triggers\n  .timeout(async (event) => {\n    await this.session.start();\n    return this.exitStep(event.name.split('/')[3]);\n  })\n  .otherwise(async () => {\n    let runAtActivationLegs = cronEvents.filter(item => item.isRunAtActivation).map(item => item.id);\n    if (runAtActivationLegs && runAtActivationLegs.length > 0 && !multipleLegs) {\n      runAtActivationLegs = [`next`];\n    }\n    await Promise.map(runAtActivationLegs, (runAtActivationLeg) => this.fork(runAtActivationLeg));\n\n    return this.exitFlow();\n  });",
    "form": {
      "component": " "
    },
    "data": {
      "scheduleEvents": [],
      "multipleLegs": false,
      "exits": [
        {
          "id": "next",
          "label": "next",
          "condition": ""
        }
      ]
    },
    "reporting": {
      "step": {
        "tags": [],
        "type": "step",
        "label": "Step",
        "enabled": true
      },
      "session": {
        "tags": [],
        "type": "session",
        "label": "Session",
        "enabled": true,
        "canDisable": false
      }
    },
    "help": "Use this step to start a flow at an exact time and date, either once or on a schedule: you create an event by specifying its starting time, date and timezone and, optionally, its recurrence. Multiple events can be created, an option to create a separate exit for each event is available. When the chosen time comes, the flow proceeds down the appropriate exit. If several events have the same start time but the individual exit option is turned off, the flow will be executed only once.\n\nTo create an event, click on the *Add event* button; in the modal window you will see a calendar on the left and the summaries of previously created events and fields to define the time for a new event on the right. After scheduling an event, click *Apply*; the options to edit, copy, delete it, as well as running it on activation, will become available in the step details pane.\n\nThe calendar shows each created event and also a preview of the new event. They can be viewed either in *month* or *year* mode; a click on *current* brings the calendar back to the current month or year. A hover over the event’s name will show up to 10 starting times of that event. Picking a different *timezone* from the dropdown in the calendar updates the dates and times of every event accordingly.\n\n### Scheduling events\n\nThe name of each new event will default to *No name* unless you specify it in 140 characters or less. The start date can be set either by a click on a day in the calendar or from the dropdown below the *date* field. The timezone can be chosen only from the *timezone* dropdown on the right.\n\nTo set up more than one schedule of a flow’s execution in the same day, click the _Add time_ button, then set up a new start time.\n\n#### Recurring events\n\nTo set up a recurring event within one day, click on *end time*; in the added fields set the end time and the interval between the executions of the flow (the limits are from 1 to 1439 min or 1 to 23 hr).\n\nTo set up a recurring event with intervals of one day or longer, check the *Recurring* box. In the added fields you can either specify the exact *end date* or check the *no end* box. There are 4 types of recurring events but only one can be chosen. \n\n*Daily* events can be repeated on even or odd days, or every N days. Note that the day count doesn't start from the chosen *start date* but from the first day of each month, for example:\n```\nStart date: 2018-10-03\nRecurring till: 2018-11-02\nDaily every 3 days\n```\ncreates an event that will occur starting on *Oct 4th*, then *7th*, and so on every 3 days until and including *Oct 31st*, and then on *Nov 1st*, as it is the first day of the new month.\n\nA *weekly* event starts the flow on selected day(s) of every week or on a numbered week of a month. Note that the first weekday of each month is set as the first day of every week in that month.\n\nUse *monthly* to set a recurring event either on selected dates (e.g. 1st, 7th, 31st) or on days of the week with an indication of its regularity (i.e. every, third, last) in the specified months.\n\n*Yearly* events lets you start the flow on chosen dates every N years.\n\n### Advanced settings\n\nThe option to *add a separate exit for each event*, if turned on, will add an exit leg for each scheduled event on the flow tree.\n\n### Reporting events \n\n*Step* and *Session* events are reported once the flow exits the step. They collect the data which can be used further in reports. You can specify tags to organize the collected data.",
    "formBuilder": {
      "stepExits": [
        {
          "id": "93c3c51b-89c3-472c-9e9a-f4ec5f4227d8",
          "data": {
            "id": "next",
            "label": "next",
            "condition": ""
          },
          "component": "exitStatic"
        }
      ],
      "hasDataOut": false,
      "stepInputs": [
        {
          "id": "d222f06b-00c2-4668-a5e7-86482cff79c3",
          "data": {
            "open": true,
            "header": "Scheduled events",
            "inputs": [
              {
                "id": "767903ca-3bf4-4826-a928-95f71fbf9a49",
                "data": {
                  "scheduleEvents": []
                },
                "meta": {
                  "name": "schedule-component",
                  "type": "onereach-studio-form-input",
                  "version": "0.5.0"
                },
                "label": "Schedule v0.5.0",
                "compiled": {},
                "component": [
                  "schedule-component",
                  "https://s3-us-west-2.amazonaws.com/content-assets.onereach.ai/component/schedule/index.js"
                ],
                "pluginRefs": [
                  "onereach-studio-plugin[\"https://s3-us-west-2.amazonaws.com/content-assets.onereach.ai/component/schedule/index.js\"][\"test-external-component\"]",
                  "onereach-studio-form-input[\"https://s3-us-west-2.amazonaws.com/content-assets.onereach.ai/component/schedule/index.js\"][\"schedule-component\"]"
                ]
              }
            ],
            "description": "",
            "allowCodeMode": true,
            "rememberState": false,
            "preserveInvalid": false,
            "renderCondition": "",
            "disabledCondition": "",
            "forceOpenWhenInvalid": true,
            "validationConditions": [],
            "renderConditionBuilder": {
              "label": "`Conditional visibility`",
              "rules": [],
              "trueValue": "any",
              "description": "``",
              "defaultValue": true,
              "isNotCollapsed": false,
              "isEditableHeader": false
            },
            "disableConditionBuilder": {
              "label": "`Conditional disablement`",
              "rules": [],
              "trueValue": "any",
              "description": "``",
              "defaultValue": false,
              "isNotCollapsed": false,
              "isEditableHeader": false
            }
          },
          "compiled": {},
          "component": "formCollapsible"
        },
        {
          "id": "d201a2c5-b22f-471c-abff-e8ca74c38354",
          "data": {
            "open": false,
            "header": "Advanced settings",
            "inputs": [
              {
                "id": "e184ee00-fb1f-4941-8444-eac7e8bceb4f",
                "data": {
                  "label": "Add a separate exit for each event",
                  "helpText": "",
                  "variable": "multipleLegs",
                  "labelLeft": false,
                  "trueLabel": "",
                  "trueValue": "",
                  "falseLabel": "",
                  "falseValue": "",
                  "isHtmlLabel": false,
                  "switchColor": "primary",
                  "advancedHelp": {
                    "link": {
                      "url": "",
                      "icon": "help",
                      "iconHelp": "",
                      "tooltipPosition": "top center"
                    },
                    "modal": {
                      "icon": "help",
                      "title": "",
                      "content": "",
                      "iconHelp": "",
                      "tooltipPosition": "top center"
                    },
                    "tooltip": {
                      "icon": "help",
                      "content": "",
                      "openTooltipOn": "hover",
                      "tooltipPosition": "top center"
                    }
                  },
                  "defaultValue": false,
                  "allowCodeMode": true,
                  "isHtmlHelpText": false,
                  "switchPosition": "left",
                  "isHtmlTrueLabel": false,
                  "overwriteLabels": false,
                  "overwriteValues": false,
                  "renderCondition": "",
                  "isHtmlFalseLabel": false,
                  "disabledCondition": "",
                  "helpDisplayOption": "hover",
                  "iconHelpTextOption": "none",
                  "validationConditions": [],
                  "renderConditionBuilder": {
                    "label": "`Conditional visibility`",
                    "rules": [],
                    "trueValue": "any",
                    "description": "``",
                    "defaultValue": true,
                    "isNotCollapsed": false,
                    "isEditableHeader": false
                  },
                  "disableConditionBuilder": {
                    "label": "`Conditional disablement`",
                    "rules": [],
                    "trueValue": "any",
                    "description": "``",
                    "defaultValue": false,
                    "isNotCollapsed": false,
                    "isEditableHeader": false
                  }
                },
                "meta": {
                  "name": "formSwitch",
                  "type": "onereach-studio-form-input",
                  "version": "1.0"
                },
                "label": "Switch",
                "compiled": {},
                "component": "formSwitch",
                "pluginRefs": [
                  "onereach-studio-plugin[\"or-ui-components@env\"][\"or-ui-components\"]",
                  "onereach-studio-form-input[\"or-ui-components@env\"][\"formSwitch\"]"
                ]
              }
            ],
            "description": "",
            "allowCodeMode": true,
            "rememberState": false,
            "preserveInvalid": false,
            "rememberedState": true,
            "renderCondition": "",
            "disabledCondition": "",
            "forceOpenWhenInvalid": true,
            "validationConditions": [],
            "renderConditionBuilder": {
              "label": "`Conditional visibility`",
              "rules": [],
              "trueValue": "any",
              "description": "``",
              "defaultValue": true,
              "isNotCollapsed": false,
              "isEditableHeader": false
            },
            "disableConditionBuilder": {
              "label": "`Conditional disablement`",
              "rules": [],
              "trueValue": "any",
              "description": "``",
              "defaultValue": false,
              "isNotCollapsed": false,
              "isEditableHeader": false
            }
          },
          "compiled": {},
          "component": "formCollapsible"
        }
      ],
      "outputExample": null,
      "hasProcessError": false,
      "hasProcessTimeout": false
    },
    "rawMode": false,
    "tour": [],
    "migrations": [
      {
        "sample": {
          "data": {
            "exits": [
              {
                "id": "next",
                "label": "next"
              }
            ],
            "scheduleEvents": []
          },
          "rawMode": false,
          "version": "21444f90-19d9-4dc7-b2ee-562ddd452955",
          "formBuilder": {
            "stepExits": [
              {
                "id": "93c3c51b-89c3-472c-9e9a-f4ec5f4227d8",
                "data": {
                  "id": "next",
                  "label": "next"
                },
                "component": "exitStatic"
              }
            ],
            "hasProcessError": false
          }
        },
        "script": " ",
        "version": "0.0.1"
      },
      {
        "sample": { },
        "script": "if (step.data) {\n  step.data.scheduleEvents = step.data.scheduleEvents.map(item => ({\n    ...item,\n    scheduleEventData: {\n      ...item.scheduleEventData,\n      isRunAtActivation: step.data.isRunAtActivation,\n      runAtTime: item.scheduleEventData.runAtTime.map(timeItem => {\n        const HH = timeItem.HH.toString();\n        const mm = timeItem.mm.toString();\n\n        return {\n          HH: HH.length === 1 ? `0${HH}` : HH,\n          mm: mm.length === 1 ? `0${mm}` : mm\n        }\n      }),\n      daily: {\n        ...item.scheduleEventData.daily,\n        cronExpressions: item.scheduleEventData.daily.cronExpressions.map(cronExpression => {\n          const cronItem = cronExpression.split(' ').filter(splitItem => Boolean(splitItem));\n          return `${cronItem[0].length === 1 ? `0${cronItem[0]}` : cronItem[0]} ${cronItem[1].length === 1 ? `0${cronItem[1]}` : cronItem[1]} ${cronItem[2]} ${cronItem[3]} ${cronItem[4]} ${cronItem[5]}`\n        })\n      },\n      weekly: {\n        ...item.scheduleEventData.weekly,\n        cronExpressions: item.scheduleEventData.weekly.cronExpressions.map(cronExpression => {\n          const cronItem = cronExpression.split(' ').filter(splitItem => Boolean(splitItem));;\n          return `${cronItem[0].length === 1 ? `0${cronItem[0]}` : cronItem[0]} ${cronItem[1].length === 1 ? `0${cronItem[1]}` : cronItem[1]} ${cronItem[2]} ${cronItem[3]} ${cronItem[4]} ${cronItem[5]}`\n        })\n      },\n      monthly: {\n        ...item.scheduleEventData.monthly,\n        cronExpressions: item.scheduleEventData.monthly.cronExpressions.map(cronExpression => {\n          const cronItem = cronExpression.split(' ').filter(splitItem => Boolean(splitItem));;\n          return `${cronItem[0].length === 1 ? `0${cronItem[0]}` : cronItem[0]} ${cronItem[1].length === 1 ? `0${cronItem[1]}` : cronItem[1]} ${cronItem[2]} ${cronItem[3]} ${cronItem[4]} ${cronItem[5]}`\n        })\n      },\n      yearly: {\n        ...item.scheduleEventData.yearly,\n        cronExpressions: item.scheduleEventData.yearly.cronExpressions.map(cronExpression => {\n          const cronItem = cronExpression.split(' ').filter(splitItem => Boolean(splitItem));;\n          return `${cronItem[0].length === 1 ? `0${cronItem[0]}` : cronItem[0]} ${cronItem[1].length === 1 ? `0${cronItem[1]}` : cronItem[1]} ${cronItem[2]} ${cronItem[3]} ${cronItem[4]} ${cronItem[5]}`\n        })\n      },\n      expressions: item.scheduleEventData.expressions.map(cronExpression => {\n        const cronItem = cronExpression.split(' ').filter(splitItem => Boolean(splitItem));;\n        return `${cronItem[0].length === 1 ? `0${cronItem[0]}` : cronItem[0]} ${cronItem[1].length === 1 ? `0${cronItem[1]}` : cronItem[1]} ${cronItem[2]} ${cronItem[3]} ${cronItem[4]} ${cronItem[5]}`\n      }),\n    }\n  }))\n  step.data.multipleLegs = false\n}",
        "version": "2.2.0"
      }
    ],
    "dateModified": 1615288729144,
    "outputExample": null
  }